# A simple runner game, imitating the dinosaur game in google chrome

# Memory manipulation toolkit

# these store full 16 bit addresses
:alias addr_hi v6
:alias addr_lo v7

: set_i_from_addr # Set I to an arbitrary address in the registers specified above.
	
	# rewrite the code below to jump to arbitrary address specified in the registers below.
	i := set_i_from_addr_location
	save addr_hi - addr_lo
	
	: set_i_from_addr_command
		0xF0 0x00
	: set_i_from_addr_location
		0x00 0x00

return

:monitor addr_hi 2 
:monitor set_i_from_addr_location "0x%2x"

:macro SET_ADDR location {
	:calc location_hi { location >> 8 }
	:calc location_lo { location & 0xFF }
	addr_hi := location_hi
	addr_lo := location_lo
}


# math registers reserved(ish) for performing math.
:alias math_1 v8
:alias math_2 v9
:alias math_3 vA
:alias math_4 vB
:alias math_5 vC
:alias math_6 vD



# A simple signed arithmetic. It's not the normal 2s complement kind,
# it's meant to be very easy for beginners to read and follow, even
# if that comes at the price of execution efficiency.

:const NEG_BIT  0b10000000
:const VAL_MASK 0b01111111

:alias sign_a math_1
:alias sign_b math_2
:alias value_a math_3
:alias value_b math_4

# helper to automate compile-time bound checking on variables
:macro ASSERT_IS_INT8 msg num {
	:assert msg { ( -127 <= num ) & ( num <= 127 ) } 
}

:macro EXTRACT_SIGN_B b {
	sign_b := NEG_BIT
	sign_b &= b
}

:macro SPLIT_INT8_CONST C {
	:calc SIGN_C  { ( C < 0 ) << 8 }
	:calc VALUE_C {   C & VAL_MASK }
}

:macro LD_INT8 REG NUM {
	ASSERT_IS_INT8 "Signed 8-bit constants loaded to a register must be between -127 and 127" NUM
	
	SPLIT_INT8_CONST NUM
	
	REG := VALUE_C
	sign_b := SIGN_C
	REG |= sign_b
}

:macro EXTRACT_SIGN_A a {
	sign_a := NEG_BIT
	sign_a &= a
}

:macro EXTRACT_VALUE_A a {
	value_a := VAL_MASK
	value_a &= a
}

:macro EXTRACT_VALUE_B b {
	value_b := VAL_MASK
	value_b &= b
}

:macro LOAD_INT8_CONST b {
	
	EXTRACT_SIGN_B  b
	EXTRACT_VALUE_B b
}

:macro ADD_S8_TEMPLATE a { 
	# software implementation of signed 8-bit addition.
	# prioritizes legibility over speed.
	
	# Requires A and B to be set beforehand, so it can
	# be re-used to define constant-based addition and
	# addition of registers to each other.
	
	# cases:
	# both positive
	# both negative
	# one neg, one positive
	if sign_a == sign_b begin
		# same sign, easy
		a := value_a
		a += value_b
		a |= sign_a
	else
		if value_a == value_b begin
			a := 0
		else
			if sign_b > sign_a begin # b is negative while a is positive
				if value_a > value_b begin
					a := value_a
					a -= value_b
				else # b > a
					a := value_b
					a -= value_a
					# equivalent to OR with NEG_BIT w/o requiring setting another register
					a |= sign_b 
				end
			else # a negative, b positive 
				if value_a > value_b begin
					a := value_a
					a -= value_b
					# equivalent to OR with NEG_BIT w/o requiring setting another register
					a |= sign_a
				else # b > a
					a := value_b
					a -= value_a
				end
			end
		end
	end
}

# this should work for both constants and non-constants?
:macro ADD_INT8_INT8 a b {
	EXTRACT_SIGN_A a
	EXTRACT_VALUE_A a
	
	EXTRACT_SIGN_B b
	EXTRACT_VALUE_B b

	ADD_S8_TEMPLATE a
}

:macro ADD_INT8_CONST a const {
	EXTRACT_SIGN_A a
	EXTRACT_VALUE a
	LD_INT8 const
	ADD_S8_TEMPLATE
}

:macro MIN_S8_C C reg {
	ASSERT_IS_INT8 "C must be between -127 and 127 inclusive" C
	
	EXTRACT_VALUE_A reg
 	EXTRACT_SIGN_A  reg
	
	SPLIT_INT8_CONST C
	
	if sign_a == SIGN_C begin
		if sign_a == 0 begin
			# choose lower of two #s gt 0
			if value_a > VALUE_C then reg := C
		else
			# choose more negative number
			if value_a < VALUE_C then reg := C
		end
	else # not same sign
		if sign_a > SIGN_C then reg := C
	end
}

:macro MAX_S8_C C reg {
	ASSERT_SIGNED_8 "C must be between -127 and 127 inclusive" C
		
	EXTRACT_VALUE_A reg
	EXTRACT_SIGN_A  reg
		
	SPLIT_INT8_CONST

	if sign_a == SIGN_C begin
		if sign_a == 0 begin # + numbers
			if value_a < VALUE_C then reg := C
		else # - #s
			if value_a > VALUE_C then reg := C
		end
	else # not same sign
		if sign_a < SIGN_C then reg := C
	end
		
}

:macro CLAMP_S8_C MIN MAX reg {
	# clamp a value to be between a range of constants
	ASSERT_SIGNED_8 "MIN must be between -127 and 127 inclusive" MIN
	ASSERT_SIGNED_8 "MAX must bet between -127 and 127 inclusive" MAX
	MIN_S8_C MAX reg
	MAX_S8_C MIN reg
	
}

:const SCREEN_WIDTH  128
:const SCREEN_HEIGHT 64

:macro BLIT_SPRITE r1 r2 length {
	plane 1
	sprite r1 r2 length
	plane 2
	sprite r1 r2 length
}


:const ANIM_DELAY_FACTOR  2  # how many game update ticks a given dino animation frame for.
:alias anim_current_frame v0 # may still want to use this for relative jumps?
:alias anim_delay_counter v1 # used to time the animation by frames. set to the constant below.

:alias dino_state v2
:alias dino_pos_y v3
:alias dino_vel_y v4
:alias dino_draw_y v5


# filler constant to indicate a byte is for padding
:const PAD 0

:const dino_HEIGHT   16
:calc  dino_GROUND_Y { SCREEN_HEIGHT - dino_HEIGHT } 

:const dino_X_POS  16

: struct_dino
: memvar_dino_anim_current_frame
	0x00
: memvar_dino_anim_delay_counter
	0x00

:const DINO_STATE_STILL     0
:const DINO_STATE_RUNNING   1
:const DINO_STATE_DUCKING   2
:const DINO_STATE_JUMPING	  3
:const DINO_STATE_CRYING    4

: memvar_dino_state
	0x00
: memvar_dino_pos_y
	0x00
: memvar_dino_vel_y
	0x00
: memvar_dino_draw_y
	0x00
#: memvar_dino_prev_draw_y
#	0x00

:macro save_dino_data {
	i := struct_dino
	save anim_current_frame - dino_draw_y
}

:macro load_dino_data {
	i := struct_dino
	load anim_current_frame - dino_draw_y
}

: dino_still # for the start of the game
	0x00 0x3E 0x00 0x7F 0x00 0x6F 0x80 0x7F
	0x80 0x7E 0x80 0xF0 0xC1 0xF0 0xE3 0xFC
	0x7F 0xF4 0x3F 0xE0 0x1F 0xC0 0x0F 0xC0
	0x06 0xC0 0x04 0x80 0x04 0x80 0x06 0xC0
	
: dino_stand
	: dino_stand_left_up
		0x00 0x3E 0x00 0x7F 0x00 0x6F 0x80 0x7F
		0x80 0x7E 0x80 0xF0 0xC1 0xF0 0xE3 0xFC
		0x7F 0xF4 0x3F 0xE0 0x1F 0xC0 0x0F 0xC0
		0x06 0xC0 0x04 0x80 0x04 0x40 0x06 0x00

	: dino_stand_right_up
		0x00 0x3E 0x00 0x7F 0x00 0x6F 0x80 0x7F
		0x80 0x7E 0x80 0xF0 0xC1 0xF0 0xE3 0xFC
		0x7F 0xF4 0x3F 0xE0 0x1F 0xC0 0x0F 0xC0
		0x06 0xC0 0x04 0x80 0x02 0x80 0x00 0xC0
		
: dino_duck
	: dino_duck_left_up
		0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
		0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
		0x7F 0xFF 0xFF 0xFB 0xDF 0xFF 0x8F 0xFF
		0x86 0xD0 0xA4 0x98 0x44 0x40 0x06 0x00

	: dino_duck_right_up
		0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
		0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
		0x7F 0xFF 0xFF 0xFB 0xDF 0xFF 0x8F 0xFF
		0x86 0xD0 0xA4 0x98 0x42 0x80 0x00 0xC0

: dino_cry
	0x00 0x3E 0x00 0x47 0x00 0x57 0x80 0x47
	0x80 0x6E 0x80 0xF0 0xC1 0xF0 0xE3 0xFC
	0x7F 0xF4 0x3F 0xE0 0x1F 0xC0 0x0F 0xC0
	0x06 0xC0 0x04 0x80 0x04 0x40 0x06 0x00
	
# this game won't use much memory, so we can replicate data
# to speed up development  and simplify execution.
: dino_flap

	: dino_flap_0
		0xE0 0xD0 0x90 0x60
  : dino_flap_1
		0x60 0xD0 0x90 0x60
	: dino_flap_2
		0x60 0xD0 0xD0 0x60
	: dino_flap_3
		0x60 0xD0 0xD0 0xE0
	: dino_flap_4
		0x60 0xD0 0xD0 0x60
	: dino_flap_5
		0x60 0xD0 0x90 0x60
: dino_flap_last
		0x60 0x90 0xD0 0x60


#:calc dino_ANIM_LENGTH { ( dino_flap_last - dino_flap ) / dino_HEIGHT }
:const dino_ANIM_LENGTH 2 # no longer have multiple frames of it.

:macro SET_I_TO_FRAME frame_index_register {

# load frame number and multiply by 32 (dino sprite length)  to get final frame offset
	math_1 <<= frame_index_register
	math_1 <<= math_1
	math_1 <<= math_1 
	math_1 <<= math_1
	math_1 <<= math_1
	
	i += math_1
}


: blit_current_dino_frame
	
	math_1 := DINO_STATE_DUCKING
	if dino_state == math_1 begin
		i := dino_duck
	else
		i := dino_stand
	end
	SET_I_TO_FRAME anim_current_frame
	math_1 := dino_X_POS
	
	BLIT_SPRITE math_1 dino_draw_y 0
return

: animate_dino
	
	# Animates the dino sprite. It uses a delay factor and location
	# Assumes that a clear instruction is used at the start of the draw cycle.
	
#	anim_prev_tick_frame := anim_current_frame
	if anim_delay_counter == 0 begin
		
		anim_current_frame += 1
		# advance animation frame
		if anim_current_frame >= dino_ANIM_LENGTH then anim_current_frame := 0
		anim_delay_counter := ANIM_DELAY_FACTOR	
	
	else
		anim_delay_counter -= 1
 	end

	blit_current_dino_frame

: end_animate_dino
return


:const GROUND_OBSTACLE_HEIGHT  15
:calc  CACTUS_DRAW_Y           { SCREEN_HEIGHT - GROUND_OBSTACLE_HEIGHT }
# each of these fills the whole 15 bytes + a PAD byte to make address
# selection easy when multiplying.
: ground_obstacle_sprites
	# setting for no obstacle at all
	:const OBSTACLE_NONE	       0
	
	:const OBSTACLE_GROUND_SMALL 1
	: obstacle_cactus_small # pad with a last byte to make multiplication easier
		0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
		0x18 0x18 0x5A 0x7E 0x18 0x18 0x18 0x00
		
	:const OBSTACLE_GROUND_LARGE 2
	: obstacle_cactus_large
	  0x18 0x18 0x18 0x18 0xDB 0xDB 0xFF 0xFF
		0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x00
	
	:const OBSTACLE_PTERODACTYL  3
	: obstacle_pterodactyl
		0x63 0x14 0x5C 0xFF 0x14 0x00 0x00 0x00
		0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


:const obstacles_MAX_LENGTH    4
:alias obstacles_end_index     v3
:alias obstacles_time_to_next  v4
:alias obstacles_chain_left    v5 # how many left in the current chain

:alias obstacles_current_index vE

:alias obstacle_type				   v0
:alias obstacle_x							 v1
:alias obstacle_y 						 v2


: obstacle_metadata
	# how many obstacles there are currently
	0x05
	# how many ticks until next obstacle
	0x00 
	# obstacles_chain_left
	0x00
	
:const obstacle_STRUCT_SIZE 4

: obstacle_data 
# Allocate storage for up to 10 obstacle positions.
# Implementation quirks:
# 	1. The last 0 byte speeds multiplication
#			It increases the struct length to a power of 2 so simple
#     bitshifting can be used to seek through the obstacle sprite
#			table rather than complicated multiplication routines.
#   2. This array will *always* be sorted
#     This means that when delete an element, we can save the
#     elements one left of their original position instead of
#     worrying about implementing a ring buffer in Octo. There
#			is also no cache in Chip-8 so no need to worry about any
#     of that.

# type,x  , y,   pad
	0x01 0x28 0x31 0x00
: obstacle_1
	0x02 0x30 0x31 0x00
: obstacle_2
	0x02 0x38 0x31 0x00
: obstacle_3
	0x01 0x40 0x31 0x00
: obstacle_4
	0x03 0x48 0x10 0x00
: obstacle_5
	0x00 0x00 0x00 0x00
: obstacle_6
	0x00 0x00 0x00 0x00
: obstacle_7
	0x00 0x00 0x00 0x00
: obstacle_8
	0x00 0x00 0x00 0x00
: obstacle_9
	0x00 0x00 0x00 0x00

:monitor obstacle_data " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_1    " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_2 	 " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_3    " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_4    " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_5    " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_6    " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_7    " type: %1i x:%1i y:%1i pad: %1i"
:monitor obstacle_8    " type: %1i x:%1i y:%1i pad: %1i"


:macro load_obstacle_metadata {
	i := obstacle_metadata
	load obstacles_end_index - obstacles_chain_left
	#math_1 := 1
	#obstacles_end_index -= math_1
}
:macro save_obstacle_metadata { 
	i := obstacle_metadata
	#math_1 := 1
	#obstacles_end_index += math_1 
	save obstacles_end_index - obstacles_chain_left
}

:alias obstacle_lookahead math_4

: update_obstacles
	# update the obstacles. 
	
	#Remember how many obstacles there currently are
	# and some other stuff.
	load_obstacle_metadata
	
	obstacles_current_index := 0
	
	SET_ADDR obstacle_data 
	set_i_from_addr
	load obstacle_type - obstacle_y
	
	# Obstacle lookahead is used to load 1 obstacle forward of
	# the write destination so we can compact the array and erase
	# the first element.
	
	if obstacle_x > 0 begin # no need to erase anything
		obstacle_lookahead := 0 
	else # set up to shift array left 1 element, overwriting the first
		
		# look ahead by 1 struct length
		obstacle_lookahead := obstacle_STRUCT_SIZE 
		
		# reduce the number of elements we will iterate through
		math_5 := 1 
		obstacles_end_index -= math_5
		
	end
	
	# If there are no obstacles, don't bother drawing any
	if obstacles_end_index == 0 then jump obstacle_spawn
	
	# Move obstacles leftward, skipping + overwriting the 1st if its x==0
	loop 
		
		#1. Load an element from memory to active registers, optionally skipping forward by 1
		set_i_from_addr
		i += obstacle_lookahead # this applies the skip
		load obstacle_type - obstacle_y

		#2.  Move the loaded obstacle left
		math_1 := 1
		obstacle_x -= math_1
		
		i := obstacle_cactus_small

		#2. Calculate any obstacle sprite table lookup we need to apply
		math_5 := obstacle_type
		math_6 := 1
		math_5 -= math_6

		#3. Multiply by 16 & apply the offset if it isn't zero
		math_6 := 0
		if math_5 > math_6 begin
			math_5 <<= math_5
			math_5 <<= math_5
			math_5 <<= math_5
			math_5 <<= math_5
			i += math_5
		end

		BLIT_SPRITE obstacle_x obstacle_y 15
		# save the data for it

    set_i_from_addr
		save obstacle_type - obstacle_y

		# advance the pointer
		#:breakpoint check_offset_math
		math_5 := obstacle_STRUCT_SIZE
		addr_lo += math_5
		addr_hi += vF

		math_5 := 1
		obstacles_current_index += math_5
		
	while obstacles_current_index < obstacles_end_index again
	
	
	save_obstacle_metadata
	
	: obstacle_spawn
	# spawn new ones if needed here
	
return


: ground_decoration
	0x88 0x22
	
: apply_gravity # make the dino's velocity go faster
	value_b := 1
	sign_b  := 0
	
	EXTRACT_VALUE_A dino_vel_y
	EXTRACT_SIGN_A  dino_vel_y
	ADD_S8_TEMPLATE dino_vel_y
	
return

:const BOOST_VELOCITY 2 


: update_dino
	load_dino_data
	#dino_pos_y -= dino_vel_y 
	
	math_1 := OCTO_KEY_W
	math_2 := OCTO_KEY_S
	
	
	#dino_draw_y := dino_GROUND_Y
	
	#:breakpoint dino_states
	#jump end_dino_update
	math_3 := DINO_STATE_RUNNING
	if dino_state == math_3 begin
		if math_1 key begin
			dino_state := DINO_STATE_JUMPING
			jump end_dino_update
		end
		
		if math_2 key begin
			dino_state := DINO_STATE_DUCKING
			jump end_dino_update
		end
	end
	
	math_3 := DINO_STATE_DUCKING	
	if dino_state == math_3 begin
		if math_2 -key begin # cancel out of duck if duck key no longer pressed
			if math_1 -key begin
				dino_state := DINO_STATE_RUNNING
			else
				dino_state := DINO_STATE_JUMPING
			end
		end
		jump end_dino_update
	end
	
	# last of elif equivalent chain, stop jumping if jump key not pressed anymore
	math_3 := DINO_STATE_JUMPING
	if dino_state == math_3 begin
		if math_1 -key then dino_state := DINO_STATE_RUNNING
	end
	: end_dino_update
	
	# draw on the ground if not jumping
	math_3 := DINO_STATE_JUMPING
	if dino_state == math_3 begin
		dino_draw_y := 24
	else
		dino_draw_y := dino_GROUND_Y
	end
	
	animate_dino
	
	save_dino_data
	
return


: score_bcd_storage
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


: draw_score
	
return

: main
: play_game
	hires
	
	
	# Set up dino, sort of like a constructor.
	
	# set initial variables
	dino_pos_y := 0
	dino_draw_y := dino_GROUND_Y
	LD_INT8 dino_vel_y 8
	dino_state := DINO_STATE_RUNNING
	
	# persist them to memory
	save_dino_data
	
	# draw a frame at initial position?
	#i := dino_flap
	#sprite dino_pos_x dino_draw_y dino_HEIGHT
	
	
# might be able to adjust the timer constant until it's 1,
# slowly increasing the difficulty of the game!
:const TICK_LENGTH_IN_TIMER 6
	# should now be dino_vel_y == 0
: start
	math_1 := TICK_LENGTH_IN_TIMER
	delay := math_1
	plane 3
	clear
	#update_dino
	
	#if dino_draw_y < 3 then jump game_over
	
	update_obstacles
	
	i := dino_duck_left_up
	#math_1 := 16
	#math_2 := 48
	
	#BLIT_SPRITE math_1 math_2 0
	# math_2 := 
	# sprite 
	
	update_dino
	
	math_1 := 1
	if vf == math_1 then jump game_over
	
	math_1 := 0

	: wait
		math_2 := delay
	if math_2 != math_1 then jump wait
	
	jump start
	
	# check if dino on the ground
	if dino_draw_y >= 60 then jump game_over

	jump start
	

: game_over
	
	#load_dino_data
	
	#erase old dino
	blit_current_dino_frame
	
	# draw crying dino
	i := dino_cry
	math_3 := dino_X_POS
	BLIT_SPRITE math_3 dino_draw_y 0
	
	# block on game over
	math_1 := key
	
	# return to main
	jump main

	
